lm.mtcars = lm(mpg~cyl)
mtcars
lm.mtcars = lm(mpg~cyl, mtcars)
lm.mtcars = lm(mpg~cyl, mtcars)
lm.mtcars
summary(lm.mtcars)
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
lm.mtcars = lm(mpg~cyl, mtcars)
plot(lm.mtcars,ask=F,which=1:2)
lm.mtcars = lm(mpg~wt, mtcars)
plot(lm.mtcars,ask=F,which=1:2)
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
plot(lm.mtcars,ask=F,which=1:3)
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
plot(lm.mtcars,ask=F,which=1:4)
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
catamaran = read.csv('https://pages.stat.wisc.edu/~bwu62/catamaran.csv')
# TODO: plotting code goes here.
#TODO: code goes here.
#TODO: code goes here
# TODO: code goes here
# TODO: code goes here.
generate_linear_data = function( n, sigma2 ) {
# TODO: code goes here.
}
# TODO: code goes here.
# TODO: code goes here
# TODO: code goes here
generate_and_estimate = function( n, sigma2 ) {
# TODO: code goes here
}
estimate_beta1hat_variance = function( n, sigma2, M ) {
# TODO: code goes here
}
# TODO: code goes here
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
summary(lm.mtcars)
lm.mtcars = lm(mpg ~ wt, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
summary(lm.mtcars)
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
summary(lm.mtcars)
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
mtcars$wt
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
confint(lm.mtcars)
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
qqline(mtcars, col='red');
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
qqline(mtcars, col='red');
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
qqline(mtcars, col='red');
lm.mtcars = lm(mpg ~ cyl + disp + wt, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
# TODO: plotting code goes here.
catamaran
# TODO: plotting code goes here.
plot(catamaran$litter, catamaran$spending)
# TODO: plotting code goes here.
plot(catamaran$litter, catamaran$spending)
abline()
# TODO: plotting code goes here.
plot(catamaran$litter, catamaran$spending)
abline(v=0)
#TODO: code goes here.
lm(catamaran$litter, catamaran$spending)
#TODO: code goes here.
lm(litter~spending, catamaran)
#TODO: code goes here.
lm(spending~litter, catamaran)
#TODO: code goes here.
summary(lm(spending~litter, catamaran))
#TODO: code goes here.
lm(spending~litter, catamaran)
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
# TODO: plotting code goes here.
ggplot(catamaran, aes(x = litter, y = spending)) + geom_point() + ggtitle("Total Spending vs Amount of Litter Purchased") + xlab("Pounds of Litter purchased in past year ") + ylab("Total spending")
catamaran = read.csv('https://pages.stat.wisc.edu/~bwu62/catamaran.csv')
library(tidyverse)
library(rlang)
install.packages("tidyverse")
model = lm(spending ~ litter, data = catamaran)
cat_intercept_hat = coefficients(model)[["(Intercept)"]]
cat_slope_hat = coefficients(model)[["litter"]]
cat_intercept_hat
cat_slope_hat
20 * cat_slope_hat
plot(model, 2)
plot(cat.model , 2)
plot(cat.model, 2)
plot(cat.model, 2)
cat.model = lm(spending ~ litter, data = catamaran)
cat_intercept_hat = coefficients(model)[["(Intercept)"]]
cat_slope_hat = coefficients(model)[["litter"]]
cat_intercept_hat
cat_slope_hat
3 * cat_slope_hat
20 * cat_slope_hat
20 * cat_slope_hat
20 * cat_slope_hat
plot(cat.model, 2)
confint(cat.model)
summary(cat.model)
plot(cats$Bwt, cats$Hwt)
plot(cats$Bwt, cats$Hwt)
library(MASS)
head(cats)
plot(cats$Bwt, cats$Hwt)
lm(Bwt~Hwt, cats)
lm(Bwt~Hwt, cats)
coefficients(cats)[["Hwt"]]
lm(Bwt~Hwt, cats)
coefficients(cats)[["Hwt"]]
model = lm(Bwt~Hwt, cats)
coefficients(model)[["Hwt"]]
model = lm(Bwt~Hwt, cats)
coef_hwt = coefficients(model)[["Hwt"]]
coef_hwt
model = lm(Bwt~Hwt, cats)
coef_hwt = coefficients(model)[["Bwt"]]
model = lm(Bwt~Hwt, cats)
coef_hwt = coefficients(model)[["Bwt"]]
model = lm(Bwt~Hwt, cats)
coef_hwt = coefficients(model)[["Hwt"]]
coef_hwt
model = lm(Hwt~Bwt, cats)
model = lm(Hwt~Bwt, cats)
model
coef_bwt = coefficients(model)[["Bwt"]]
coef_bwt
ggplot(cats, aes(x=Bwt, y=Hwt, color=Sex)) + geom_point() +
xlab("Body Weight (kg)") + ylab("Heart Weight (g)")
ggplot(cats, aes(x=Bwt, y=Hwt, color=Sex)) + geom_point() +
xlab("Body Weight (kg)") + ylab("Heart Weight (g)")
ggplot(cats, aes(x=Bwt, y=Hwt, color=Sex)) + geom_point() +
xlab("Body Weight (kg)") + ylab("Heart Weight (g)")
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
ggplot(cats, aes(x=Bwt, y=Hwt, color=Sex)) + geom_point() +
xlab("Body Weight (kg)") + ylab("Heart Weight (g)")
ggplot(cats, aes(x=Bwt, y=Hwt, color=Sex)) + geom_point() +
xlab("Body Weight (kg)") + ylab("Heart Weight (g)")
model <- lm(Hwt ~ Bwt*Sex, data=cats)
summary(model)
model <- lm(Hwt ~ Bwt:Sex, data=cats)
summary(model)
model <- lm(Hwt ~ Bwt:Sex, data=cats)
summary(model)
model <- lm(Hwt ~ Bwt:Sex, data=cats)
summary(model)
model <- lm(Hwt ~ Bwt:Sex, data=cats)
summary(model)
model <- lm(Hwt ~ Bwt + Sex + Bwt:Sex, data=cats)
summary(model)
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
catamaran = read.csv('https://pages.stat.wisc.edu/~bwu62/catamaran.csv')
library(tidyverse)
set.seed(1234)
# TODO: plotting code goes here.
ggplot(catamaran, aes(x = litter, y = spending)) + geom_point() + ggtitle("Total Spending vs Amount of Litter Purchased") + xlab("Pounds of Litter purchased in past year ") + ylab("Total spending")
model = lm(spending ~ litter, data = catamaran)
cat_intercept_hat = coefficients(model)[["(Intercept)"]]
cat_slope_hat = coefficients(model)[["litter"]]
cat_intercept_hat
cat_slope_hat
3*cat_slope_hat
20*cat_slope_hat
plot(model, 2)
#The Old Stat-240 way
estimate = coef(summary(model))[2, "Estimate"]
se = coef(summary(model))[2, "Std. Error"]
df = 48
lower = estimate - qt(.975, df-2)*se
high = estimate + qt(0.975, df-2)*se
lower
high
#Verify result with function
confint(model)
summary(model)
generate_linear_data = function( n, sigma2 ) {
x = rnorm(n, mean=0, sd = 1)
eps = rnorm(n, mean=0, sd = sqrt(sigma2))
y = -1 + 0.5*x+ eps
df = data.frame("predictors"=x, "responses"=y)
return (df)
}
sigma2 = 0.25
df = generate_linear_data(100, sigma2)
ggplot(df, aes(x=predictors, y = responses)) + geom_point() + ggtitle("Scatter Plot of Generated Data, Sigma=0.25") + xlab("predictors(x)")+ ylab("Responses(y)")
sigma2 = 1
df = generate_linear_data(100, sigma2)
ggplot(df, aes(x=predictors, y = responses)) + geom_point() + ggtitle("Scatter Plot of Generated Data, Sigma=1") + xlab("predictors(x)")+ ylab("Responses(y)")
sigma2 = 0.1
df = generate_linear_data(100, sigma2)
ggplot(df, aes(x=predictors, y = responses)) + geom_point() + ggtitle("Scatter Plot of Generated Data, Sigma=0.1") + xlab("predictors(x)")+ ylab("Responses(y)")
generate_and_estimate = function( n, sigma2 ) {
data = generate_linear_data(n, sigma2)
model = lm(responses ~ predictors, data = data)
beta1hat = coefficients(model)[["predictors"]]
return (beta1hat)
}
estimate_beta1hat_variance = function( n, sigma2, M ) {
beta1s = rep(NA, M)
for(i in 1:M){
beta1s[i]=generate_and_estimate(n, sigma2)
}
return (var(beta1s))
}
sigmas = seq(0.25, 4, 0.25)
M=1000;
n=100;
vals = rep(NA, length(sigmas))
for(i in 1:length(sigmas)){
sigma2 = sigmas[i]
vals[i]= estimate_beta1hat_variance(n, sigma2, M)
}
df = data.frame("sigmas"=sigmas, "variances" = vals)
ggplot(df, aes(x = sigmas, y = variances)) + geom_point() +  geom_smooth(method="lm", se=FALSE) + ggtitle("Variance of Slope estimation vs Variance of noise") +
xlab("Variance of noise sigma^2") + ylab("Variance of beta_1 estimate")
head(mtcars, 10)
lm.mtcars = lm(mpg ~ hp + wt + disp, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
summary(lm.mtcars)
# confint(...)
library(MASS)
head(cats)
ggplot(cats, aes(x = Bwt, y = Hwt)) + geom_point() + ggtitle("Heart Weight vs Cat Body Weight") + xlab("Body Weight (kg)") + ylab("Heart Weight (g)")
# TODO: regression code goes here.
model4 = lm(Hwt ~ Bwt, data=cats)
# TODO: additional code (if needed to extract coefficients) here
coefficients(model4)
beta1_hat = coefficients(model4)[["Bwt"]]
beta0_hat = coefficients(model4)[["(Intercept)"]]
#TODO: plotting code goes here.
ggplot(cats, aes(x = Bwt, y = Hwt, color = Sex)) + geom_point() + ggtitle("Heart Weight vs Cat Body Weight") + xlab("Body Weight (kg)") + ylab("Heart Weight (g)")
# TODO: code to specify and fit the model goes here.
newModel4 = lm(Hwt ~ Bwt + Sex + Bwt:Sex, data = cats)
summary(newModel4)
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
# TODO: code to specify and fit the model goes here.
newModel4 = lm(Hwt ~ Bwt + Sex + Bwt:Sex, data = cats)
summary(newModel4)
sigma2 = 0.25
df = generate_linear_data(100, sigma2)
ggplot(df, aes(x=predictors, y = responses)) + geom_point() + ggtitle("Scatter Plot of Generated Data, Sigma=0.25") + xlab("predictors(x)")+ ylab("Responses(y)")
generate_linear_data = function( n, sigma2 ) {
x = rnorm(n, mean=0, sd = 1)
eps = rnorm(n, mean=0, sd = sqrt(sigma2))
y = -1 + 0.5 * x + eps
data = data.frame("predictors"= x, "responses"= y)
return (data)
}
sigma2 = 0.25
data = generate_linear_data(100, sigma2)
plot(data$x, data$y)
sigma2 = 0.25
data = generate_linear_data(100, sigma2)
plot(data$predictors, data$responses)
sigma2 = 1
df = generate_linear_data(100, sigma2)
ggplot(df, aes(x=predictors, y = responses)) + geom_point() + ggtitle("Scatter Plot of Generated Data, Sigma=1") + xlab("predictors(x)")+ ylab("Responses(y)")
data = generate_linear_data(100, 1)
plot(data$predictors, data$responses)
data = generate_linear_data(100, 0.1)
plot(data$predictors, data$responses)
generate_and_estimate = function( n, sigma2 ) {
data = generate_linear_data(n, sigma2)
model = lm(responses ~ predictors, data = data)
beta1hat = coefficients(model)[["predictors"]]
return (beta1hat)
}
estimate_beta1hat_variance = function( n, sigma2, M ) {
beta1s = rep(NA, M)
for(i in 1:M){
beta1s[i]=generate_and_estimate(n, sigma2)
}
return (var(beta1s))
}
sigmas = seq(0.25, 4, 0.25)
M=1000;
n=100;
vals = rep(NA, length(sigmas))
for(i in 1:length(sigmas)){
sigma2 = sigmas[i]
vals[i]= estimate_beta1hat_variance(n, sigma2, M)
}
data = data.frame("sigmas"=sigmas, "variances" = vals)
plot(data$sigmas, data$variances)
sigmas <- seq(0.25, 4, 0.25)
M <- 1000
n <- 100
vals <- sapply(sigmas, function(sigma2) estimate_beta1hat_variance(n, sigma2, M))
data <- data.frame(sigmas = sigmas, variances = vals)
plot(data$sigmas, data$variances)
pbinom(19,60,0.25)
1-pbinom(19,60,0.25)
1-pbinom(14,55,0.25)
# Load the dataset
pokedex <- read.csv("pokedex.csv")
library(shiny); runApp('Desktop/Stat436/HW2/HW2.r')
runApp('Desktop/Stat436/HW2/HW2.r')
runApp('Desktop/Stat436/HW2/HW2.r')
runApp('Desktop/Stat436/HW2/HW2.r')
runApp('Desktop/Stat436/HW2/HW2.r')
knitr::opts_chunk$set(echo = TRUE)
pokedex <- read.csv("pokedex.csv")
pokedex <- read.csv("pokedex.csv")
pokedex <- read.csv("pokedex.csv")
pokedex <- read.csv("pokedex.csv")
library(dplyr)
pokedex <- read.csv("pokedex.csv")
library(dplyr)
pokedex <- read.csv("pokedex.csv")
library(dplyr)
pokedex <- read.csv("pokedex.csv")
library(dplyr)
pokedex <- read.csv("pokedex.csv")
library(dplyr)
pokedex <- read.csv("pokedex.csv")
ls
library(dplyr)
pokedex <- read.csv("pokedex.csv")
pokedex %>% pivot_longer(cols = c(Type.1, Type.2), names_to = "Type_number", values_to = "Type") %>%
filter(!is.na(Type)) %>%
select(-Type_number)
library(dplyr)
pokedex <- read.csv("pokedex.csv")
pokedex %>% pivot_longer(cols = c(Type.1, Type.2), names_to = "Type_number", values_to = "Type") %>%
filter(!is.na(Type)) %>%
select(-Type_number)
View(newModel4)
library(tidyverse)
pokedex <- read.csv("pokedex.csv")
pokedex %>% pivot_longer(cols = c(Type.1, Type.2), names_to = "Type_number", values_to = "Type") %>%
filter(!is.na(Type)) %>%
select(-Type_number)
library(tidyverse)
pokedex <- read.csv("pokedex.csv")
pokedex %>% pivot_longer(cols = c(Type.1, Type.2), names_to = "Type_number", values_to = "Type")
library(tidyverse)
pokedex <- read.csv("pokedex.csv")
pokedex %>% pivot_longer(cols = c(Type.1, Type.2), names_to = "Type_number", values_to = "Type") %>%
filter(!is.na(Type)) %>%
select(-Type_number)
library(tidyverse)
pokedex <- read.csv("pokedex.csv")
pokedex %>% pivot_longer(cols = c(Type.1, Type.2), names_to = "Type_number", values_to = "Type") %>%
filter(!is.na(Type)) %>%
select(-Type_number) %>%  drop_na()
library(tidyverse)
pokedex <- read.csv("pokedex.csv")
pokedex %>% pivot_longer(cols = c(Type.1, Type.2), names_to = "Type_number", values_to = "Type") %>%
filter(!is.na(Type)) %>%
select(-Type_number) %>%
filter(!Type == "")
runApp('Desktop/Stat436/HW2/HW2.r')
runApp('Desktop/Stat436/HW2/HW2.r')
runApp('Desktop/Stat436/HW2/HW2.r')
runApp('Desktop/Stat436/HW2/HW2.r')
runApp('Desktop/Stat436/HW2/HW2.r')
runApp('Desktop/Stat436/HW2/HW2.r')
runApp('HW2.r')
runApp('HW2.r')
runApp('Desktop/Stat436/HW2/HW2.r')
runApp('Desktop/Stat436/HW2/HW2.r')
runApp('Desktop/Stat436/HW2/HW2.r')
runApp('Desktop/Stat436/HW2/HW2.r')
runApp('Desktop/Stat436/HW2/HW2.r')
library(DiagrammeR)
install.packages("DiagrammeR")
library(DiagrammeR)
grViz("
digraph shiny_app_reactivity {
graph [layout = dot, rankdir = TB]
# Define nodes
node [shape = rectangle, style = filled, fillcolor = lightblue]
visualization [label = 'input$visualization']
team [label = 'input$team']
years [label = 'input$years']
metric [label = 'input$metric']
comparison_years [label = 'input$comparison_years']
teams [label = 'input$teams']
comparisonMetric [label = 'input$comparisonMetric']
brushing_years [label = 'input$brushing_years']
plot_brush [label = 'input$plot_brush']
filtered_data [label = 'filtered_data()']
comparison_data [label = 'comparison_data()']
brushed_data [label = 'brushed_data()']
teamPlot [label = 'output$teamPlot']
comparisonPlot [label = 'output$comparisonPlot']
brushingPlot [label = 'output$brushingPlot']
formatted_table [label = 'output$formatted_table']
# Define edges
visualization -> teamPlot
team -> filtered_data -> teamPlot
years -> filtered_data -> teamPlot
metric -> filtered_data -> teamPlot
comparison_years -> comparison_data -> comparisonPlot
teams -> comparison_data -> comparisonPlot
comparisonMetric -> comparison_data -> comparisonPlot
brushing_years -> brushed_data -> brushingPlot
plot_brush -> formatted_table
}
")
install.packages("DiagrammeR")
library(DiagrammeR)
grViz("
digraph shiny_app_reactivity {
graph [layout = dot, rankdir = TB]
# Define input nodes
node [shape = rectangle, style = filled, fillcolor = lightgreen]
visualization [label = 'input$visualization']
team [label = 'input$team']
years [label = 'input$years']
metric [label = 'input$metric']
comparison_years [label = 'input$comparison_years']
teams [label = 'input$teams']
comparisonMetric [label = 'input$comparisonMetric']
brushing_years [label = 'input$brushing_years']
plot_brush [label = 'input$plot_brush']
# Define reactive expression nodes
node [shape = ellipse, style = filled, fillcolor = lightblue]
filtered_data [label = 'filtered_data()']
comparison_data [label = 'comparison_data()']
brushed_data [label = 'brushed_data()']
# Define output nodes
node [shape = rectangle, style = filled, fillcolor = lightcoral]
teamPlot [label = 'output$teamPlot']
comparisonPlot [label = 'output$comparisonPlot']
brushingPlot [label = 'output$brushingPlot']
formatted_table [label = 'output$formatted_table']
# Define edges for inputs to reactive expressions
team -> filtered_data
years -> filtered_data
metric -> filtered_data
comparison_years -> comparison_data
teams -> comparison_data
comparisonMetric -> comparison_data
brushing_years -> brushed_data
plot_brush -> formatted_table
# Define edges for reactive expressions to outputs
filtered_data -> teamPlot
comparison_data -> comparisonPlot
brushed_data -> brushingPlot
# Define direct edge from input to output for visualization control
visualization -> teamPlot
}
")
install.packages("DiagrammeR")
install.packages("DiagrammeR")
library(DiagrammeR)
grViz("
digraph shiny_app_reactivity {
graph [layout = dot, rankdir = TB]
# Define input nodes
node [shape = rectangle, style = filled, fillcolor = lightgreen]
visualization [label = 'input$visualization']
team [label = 'input$team']
years [label = 'input$years']
metric [label = 'input$metric']
comparison_years [label = 'input$comparison_years']
teams [label = 'input$teams']
comparisonMetric [label = 'input$comparisonMetric']
brushing_years [label = 'input$brushing_years']
plot_brush [label = 'input$plot_brush']
# Define reactive expression nodes
node [shape = ellipse, style = filled, fillcolor = lightblue]
filtered_data [label = 'filtered_data()']
comparison_data [label = 'comparison_data()']
brushed_data [label = 'brushed_data()']
# Define output nodes
node [shape = rectangle, style = filled, fillcolor = lightcoral]
teamPlot [label = 'output$teamPlot']
comparisonPlot [label = 'output$comparisonPlot']
brushingPlot [label = 'output$brushingPlot']
formatted_table [label = 'output$formatted_table']
# Define edges for inputs to reactive expressions
team -> filtered_data
years -> filtered_data
metric -> filtered_data
comparison_years -> comparison_data
teams -> comparison_data
comparisonMetric -> comparison_data
brushing_years -> brushed_data
plot_brush -> formatted_table
# Define edges for reactive expressions to outputs
filtered_data -> teamPlot
comparison_data -> comparisonPlot
brushed_data -> brushingPlot
# Define direct edge from input to output for visualization control
visualization -> teamPlot
}
")
install.packages("DiagrammeR")
knitr::opts_chunk$set(echo = TRUE)
install.packages("DiagrammeR")
